include("general")

func SaveEnvironment()
  // --- Сохраняем окружение родительского контейнера
  old_local_vars = BLK_LOC_VAR
  old_local_methods = BLK_METHODS
  old_oncreate = BLK_ON_CREATE
  old_on_create_opt_menu = BLK_ON_CREATE_OPT_MENU
  old_onstart = BLK_ON_START
  old_onresume = BLK_ON_RESUME
  old_onpause = BLK_ON_PAUSE
  old_onstop = BLK_ON_STOP
  old_ondestroy = BLK_ON_DESTROY
  old_activity_result = BLK_ACTIVITY_RESULT
  old_class_name = CURRENT_CLASS
  old_import = BLK_IMPORT
  old_classes = BLK_CLASSES
  old_on_create_cont_menu = BLK_ON_CREATE_CONT_MENU
  old_on_cont_item = BLK_ON_CONTEXT_ITEM
  old_on_opt_item_selected = BLK_ON_OPT_ITEM_SELECTED

  old_parent_id = PARENT_ID
  old_finalize = ARR_FINALIZE
  // ---
end

func RestoreEnvironment()
  // --- Восстанавливаем окружение родительского контейнера
  BLK_LOC_VAR = old_local_vars
  BLK_METHODS = old_local_methods
  BLK_ON_CREATE = old_oncreate
  BLK_ON_CREATE_OPT_MENU = old_on_create_opt_menu
  BLK_ON_START = old_onstart
  BLK_ON_RESUME = old_onresume
  BLK_ON_PAUSE = old_onpause
  BLK_ON_STOP = old_onstop
  BLK_ON_DESTROY = old_ondestroy
  BLK_ACTIVITY_RESULT = old_activity_result
  CURRENT_CLASS = old_class_name
  BLK_IMPORT = old_import
  BLK_CLASSES = old_classes
  BLK_ON_CREATE_CONT_MENU = old_on_create_cont_menu
  BLK_ON_CONTEXT_ITEM = old_on_cont_item
  BLK_ON_OPT_ITEM_SELECTED = old_on_opt_item_selected

  PARENT_ID = old_parent_id

  cur_finalize = ARR_FINALIZE
  ARR_FINALIZE = old_finalize
  // ---
end

func SetEnvironment()
  // --- Создаем окружение текущего контейнера
  BLK_LOC_VAR = local_vars
  BLK_METHODS = local_methods
  BLK_ON_CREATE = cur_oncreate
  BLK_ON_CREATE_OPT_MENU = cur_on_create_opt_menu
  BLK_ON_START = cur_onstart
  BLK_ON_RESUME = cur_onresume
  BLK_ON_PAUSE = cur_onpause
  BLK_ON_STOP = cur_onstop
  BLK_ON_DESTROY = cur_ondestroy
  BLK_ACTIVITY_RESULT = cur_activity_result
  CURRENT_CLASS = cur_class_name
  BLK_IMPORT = cur_import
  BLK_CLASSES = cur_classes
  BLK_ON_CREATE_CONT_MENU = cur_on_create_cont_menu
  BLK_ON_CONTEXT_ITEM = cur_on_cont_item
  BLK_ON_OPT_ITEM_SELECTED = cur_on_opt_item_selected

  PARENT_ID = sys.curelement()
  ARR_FINALIZE = cur_finalize
  // ---
end

// ============================================ INIT ============================================== //

func Init()
  fvar(old, tmp, this)
  var(local_vars, local_methods, cur_oncreate,
       cur_on_create_opt_menu, cur_onstart, cur_onresume, cur_onpause,
       cur_onstop, cur_ondestroy, cur_activity_result, cur_manifest, cur_import,
       cur_classes, cur_finalize, cur_on_create_cont_menu, cur_on_cont_item,
       cur_on_opt_item_selected)

  var(old_local_vars, old_local_methods, old_oncreate,
       old_on_create_opt_menu old_onstart, old_onresume, old_onpause,
       old_onstop, old_ondestroy, old_activity_result, old_class_name, old_import,
       old_classes, old_parent_id, old_finalize, old_on_create_cont_menu, old_on_cont_item,
       old_on_opt_item_selected)

  var(layout_name, cur_class_name)
  var(arCompBlocks, arManagers, arTops, arLefts, arOrders) // Вспомогательные массивы для поддержки порядка размещения компонентов

  //cur_class_name = (SysName = '')?(activity):(code(SysName))
  //layout_name = cur_class_name + 'layout'


  this = sys.curelement()
  sys.selectelement(cgt.el_get_parent_id()) // Activity
  tmp = cur_class_name // cur_class_name, который в Activity
  sys.selectelement (this) // ChildActivity
  cur_class_name = tmp // cur_class_name - в ChildActivity
  layout_name = cur_class_name + 'layout'


  // --- Подготавливаем окружение текущего контейнера
  local_vars = block.reggen()
  local_methods = block.reggen()
  cur_oncreate = block.reggen()
  cur_on_create_opt_menu = block.reggen()
  cur_onstart = block.reggen()
  cur_onresume = block.reggen()
  cur_onpause = block.reggen()
  cur_onstop = block.reggen()
  cur_ondestroy = block.reggen()
  cur_activity_result = block.reggen()
  //cur_manifest = block.reggen()
  cur_import = block.reggen()
  cur_classes = block.reggen()
  cur_on_create_cont_menu = block.reggen()
  cur_on_cont_item = block.reggen()
  cur_on_opt_item_selected = block.reggen()

  cur_finalize &= ''

  old = block.cur()

  // --- Сохраняем окружение родительского контейнера
  SaveEnvironment()

  // --- Создаем окружение текущего контейнера
  SetEnvironment()


  block.select(BLK_IMPORT)
    println('package ', PACKAGE_NAME, ';')
    if (TARGET_API > 10)
      println('import android.app.Activity;')
    else
      println('import android.support.v7.app.ActionBarActivity;')
    end
    println('import android.os.Bundle;')
  block.select(old)


  sys.initall()

    // ======== Обработка событий ======== //

    if(linked(onCreate))
      tmp = block.reggen()
      block.select(tmp)
        event(onCreate)
      block.select(BLK_ON_CREATE)
      block.copyhere(tmp)
      block.delete(tmp)
    end


    if(linked(onStart))
      tmp = block.reggen()
      block.select(tmp)
        event(onStart)
      block.select(BLK_ON_START)
      block.copyhere(tmp)
      block.delete(tmp)
    end


    if(linked(onResume))
      tmp = block.reggen()
      block.select(tmp)
        event(onResume)
      block.select(BLK_ON_RESUME)
      block.copyhere(tmp)
      block.delete(tmp)
    end


    if(linked(onPause))
      tmp = block.reggen()
      block.select(tmp)
        event(onPause)
      block.select(BLK_ON_PAUSE)
      block.copyhere(tmp)
      block.delete(tmp)
    end


    if(linked(onStop))
      tmp = block.reggen()
      block.select(tmp)
        event(onStop)
      block.select(BLK_ON_STOP)
      block.copyhere(tmp)
      block.delete(tmp)
    end


    if(linked(onDestroy))
      tmp = block.reggen()
      block.select(tmp)
        event(onDestroy)
      block.select(BLK_ON_DESTROY)
      block.copyhere(tmp)
      block.delete(tmp)
    end

    // ======== ================= ======== //

  block.select(old)

  // --- Восстанавливаем окружение родительского контейнера
  RestoreEnvironment()

end

// ========================================================================================== //


func doClose()
  println('finish();')
end

func doSetResult(_data)
  fvar(i)
  i = ReadData(_data, 'Intent', '')
  if (i = '')
    trace('MainActivity: не указан Intent для метода doSetResult!')
    return(0)
  end
  println('setResult(RESULT_OK, ', i, ');')
end

func Intent()
  return(MakeData('getIntent()', 'Intent'))
end


// ============================================ FINISH ============================================== //
func Finish()
  fvar(old, tmp, i, this, class_body, cls_index)

  old = block.cur()

  // --- Сохраняем окружение родительского контейнера
  SaveEnvironment()

  // --- Создаем окружение текущего контейнера
  SetEnvironment()


  // ********** Вызов метода finish() зарегистрированных компонентов *********** //

    for (i = 1; i<_arr.count(ARR_FINALIZE); i++)
      sys.event(ARR_FINALIZE[i], 'finish')
    end

  // *************************************************************************** //


// ******** LAYOUT ******** //

    block.reg(layout_name)
    ARR_LAYOUT &= layout_name
    block.select(layout_name)
      println('<?xml version="1.0" encoding="utf-8"?>')
      if (DefaultLayout = 0)
        println('<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"')
        println('android:orientation="vertical"')
        PrintBackgroundAttribute()
        println('android:layout_width="match_parent"')
        println('android:layout_height="match_parent">')
          block.inclvl()
            tmp = arCompBlocks
            for (i = 0; i<_arr.count(arManagers); i++)
              if (arManagers[i] <> 'undefined')
                tmp &= sys.event(arManagers[i], 'return_submanagers_array')
              end
            end
            lng.printblockarray(tmp)
          block.declvl()
          println('</LinearLayout>')
      else
        tmp = sys.event(DefaultLayout, 'return_submanagers_array')
        lng.printblockarray(tmp)
      end

// ************************ //



// ******** Тело класса ******** //

  class_body = block.reggen()
  ARR_CLASSES &= "x"
  cls_index = _arr.count(ARR_CLASSES)-1
  ARR_CLASSES[cls_index] = cur_class_name & class_body

  block.select(class_body)

  block.copyhere(cur_import)
  block.delete(cur_import)

  println('public class ', cur_class_name, ' extends ', (TARGET_API > 10)?'Activity':'ActionBarActivity')
  println('{')
    block.inclvl()

    block.copyhere(local_vars)
    block.delete(local_vars)
    block.copyhere(local_methods)
    block.delete(local_methods)

  //== onCreate
    println('')
    println('@Override')
    println('public void onCreate(Bundle savedInstanceState)')
    println('{')
      block.inclvl()
        println('super.onCreate(savedInstanceState);')
        println('setContentView(R.layout.', layout_name, ');')
        block.copyhere(cur_oncreate)
        block.delete(cur_oncreate)
      block.declvl()
    println('}')
  // ==

  //== onCreateOptionsMenu
    if (not block.isempty(cur_on_create_opt_menu))
      println('')
      println('@Override')
      println('public boolean onCreateOptionsMenu(Menu menu)')
      println('{')
        block.inclvl()
          block.copyhere(cur_on_create_opt_menu)
          block.delete(cur_on_create_opt_menu)
          println('return true;')
        block.declvl()
      println('}')
    end
  // ==

    //== onCreateContextMenu
      if (not block.isempty(cur_on_create_cont_menu))
        println('')
        println('@Override')
        println('public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo)')
        println('{')
          block.inclvl()
            println('switch (v.getId()) {')
              block.inclvl()
                block.copyhere(cur_on_create_cont_menu)
                block.delete(cur_on_create_cont_menu)
                block.declvl()
            println('}')
          block.declvl()
        println('}')
      end
    // ==

    //== onContextItemSelected
      if (not block.isempty(cur_on_cont_item))
        println('')
        println('@Override')
        println('public boolean onContextItemSelected(MenuItem item)')
        println('{')
          block.inclvl()
            println('switch (item.getItemId()) {')
            block.inclvl()
              block.copyhere(cur_on_cont_item)
              block.delete(cur_on_cont_item)
              println('default: return super.onContextItemSelected(item);')
            block.declvl()
            println('}')
          block.declvl()
        println('}')
      end
    // ==
    
    //== onOptionsItemSelected
    	if(not block.isempty(cur_on_opt_item_selected))
        println('@Override')
        println('public boolean onOptionsItemSelected(MenuItem item) {')
          block.inclvl()
            println('switch (item.getItemId()) {')
            block.inclvl()
              block.copyhere(cur_on_opt_item_selected)
              block.delete(cur_on_opt_item_selected)
              println('default: return super.onOptionsItemSelected(item);')
            block.declvl()
            println('}')
            println('return true;')
          block.declvl()  
        println('}')
      end
    // ==

  //== onStart
    if (not block.isempty(cur_onstart))
      println('@Override')
      println('protected void onStart()')
      println('{')
        block.inclvl()
          println('super.onStart();')
          block.copyhere(cur_onstart)
          block.delete(cur_onstart)
        block.declvl()
      println('}')
    end
  // ==

  //== onResume
    if (not block.isempty(cur_onresume))
      println('@Override')
      println('protected void onResume()')
      println('{')
        block.inclvl()
          println('super.onResume();')
          block.copyhere(cur_onresume)
          block.delete(cur_onresume)
        block.declvl()
      println('}')
    end
  // ==

  //== onPause
    if (not block.isempty(cur_onpause))
      println('@Override')
      println('protected void onPause()')
      println('{')
        block.inclvl()
          block.copyhere(cur_onpause)
          block.delete(cur_onpause)
          println('super.onPause();')
        block.declvl()
      println('}')
    end
  // ==

  //== onStop
    if (not block.isempty(cur_onstop))
      println('@Override')
      println('protected void onStop()')
      println('{')
        block.inclvl()
          block.copyhere(cur_onstop)
          block.delete(cur_onstop)
          println('super.onStop();')
        block.declvl()
      println('}')
    end
  // ==

  //== onDestroy
    if (not block.isempty(cur_ondestroy))
      println('@Override')
      println('protected void onDestroy()')
      println('{')
        block.inclvl()
          block.copyhere(cur_ondestroy)
          block.delete(cur_ondestroy)
          println('super.onDestroy();')
        block.declvl()
      println('}')
    end
  // ==

  //== onActivityResult
    if (not block.isempty(cur_activity_result))
      println('protected void onActivityResult(int requestCode, int resultCode, Intent data)')
      println('{')
        block.inclvl()
          block.copyhere(cur_activity_result)
          block.delete(cur_activity_result)
        block.declvl()
      println('}')
    end
  // ==

  block.declvl()
  println('}') // Закрывающая скобка текущего класса

  // Дополнительные классы
  block.copyhere(cur_classes)
  block.delete(cur_classes)

// ******************************** //

// ******** MANIFEST ******** //

    block.select('BLK_MANIFEST')
    //block.select(cur_manifest)
    tmp = block.reggen()
    block.select(tmp)
    
      print('<activity android:name="', cur_class_name, '" ')
      if (isndef(Icon))
        println('android:icon="@drawable/', aicon,'"')
      end
      print('android:label=', lng.strtoxml(Caption),' ')
            
      // Тема оформления в зависимости от версии API
      //"Device default","Light","Holo","Holo.Light","Holo.Light.DarkActionBar"
      if (Theme = 1)
          print('android:theme="@android:style/Theme.Light"') // Существует на всех версиях
      else
        if (TARGET_API > 10)
          switch(Theme)
            case 2:
              print('android:theme="@android:style/Theme.Holo"')
            case 3:
              print('android:theme="@android:style/Theme.Holo.Light"')
            case 4:
              print('android:theme="@android:style/Theme.Holo.Light.DarkActionBar"')
          end
        else
          switch(Theme)
            case 0:
              print('android:theme="@style/Theme.AppCompat"') // Если не задать тему - ActionBarActivity из ASL вылетает
            case 2:
              print('android:theme="@style/Theme.AppCompat"')
            case 3:
              print('android:theme="@style/Theme.AppCompat.Light"') 
            case 4:
              print('android:theme="@style/Theme.AppCompat.Light.DarkActionBar"')
          end
        end
      end
      
      println('>')
      block.inclvl()

        if (ShowInLauncher = 1)
          println('<intent-filter>')
            block.inclvl()
            println('<action android:name="android.intent.action.MAIN" />')
            println('<category android:name="android.intent.category.LAUNCHER" />')
            block.declvl()
          println('</intent-filter>')
        end

        if (_arr.count(IntentFilter) > 0)
          println('<intent-filter>')
            block.inclvl()
            for (i = 0; i<_arr.count(IntentFilter); i++)
              println('<action android:name=', IntentFilter[i], ' />')
            end
            println('<category android:name="android.intent.category.DEFAULT" />')
            block.declvl()
          println('</intent-filter>')
        end

      block.declvl()
      println('</activity>')

    block.select('BLK_MAINBODY')
    MFAddComponent(tmp)
    block.delete(tmp)

// ************************ //

// ******** Иконка ******** //

    if (isndef(Icon))
      lng.proptofile(Icon, 'Elements\Android\code\result\res\drawable\\'&& aicon && '.png')
    end

// ************************ //

  block.select(old)

  // --- Восстанавливаем окружение родительского контейнера
  RestoreEnvironment()

end

// ========================================================================================== //


func add_to_layout(blk, t, l)
  fvar(i)
  if (DefaultLayout <> 0)
    sys.event(DefaultLayout, 'add_to_layout', blk, t, l)
  else
    i = GetIndexByTwoArrays(arTops, arLefts, t, l)
    arCompBlocks = InsertInArray(arCompBlocks, blk, i)
    arTops = InsertInArray(arTops, t, i)
    arLefts = InsertInArray(arLefts, l, i)
  end
end


func add_manager_to_layout(mgr_id, o)
  fvar(i)
  if ((DefaultLayout <> 0) and (DefaultLayout <> mgr_id))
    sys.event(DefaultLayout, 'add_manager_to_layout', mgr_id, o)
  else
    i = GetIndexInArray(arOrders, o)
    arManagers = InsertInArray(arManagers, mgr_id, i)
    arOrders = InsertInArray(arOrders, o, i)
  end
end

