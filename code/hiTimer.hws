include("General")

func init()
  fvar(tmp, old)
  
  addToImport('java.util.Timer')
  addToImport('java.util.TimerTask')
  
  addVar(t + ' = new Timer()', 'Timer')
  addVar(tt + ' = new ' + MyTimerTask + '()', MyTimerTask)
  addVar(tg, 'boolean')
  addVar(ot, 'boolean')
  
  tmp = block.reggen()
  old = block.select(tmp)
    println('public class ',MyTimerTask,' extends TimerTask {')
      block.inclvl()
        println('@Override')
        println('public void run() {')
          block.inclvl()
            event(onTimer)
            println('if(',ot,') {')
              block.inclvl()
                println(ot,' = false;')
                  println(tt,'.cancel();')
                  println(tt,' = new ',MyTimerTask,'();')
              block.declvl()
            println('}')
          block.declvl()
        println('}')
      block.declvl()
    println('}')
  moveBlockTo(BLK_METHODS)
  block.select(old)
end

func doStart(_data)
  println('if(!',tg,') {')
    println('if(',e_int(Interval),' < 1) {')
      block.inclvl()
        println(ot,' = true;')
        println(t,'.schedule(',tt,', ',e_int(Delay),');')
      block.declvl()
    println('} else {')
      block.inclvl()
        println(tg,' = true;')
        println(t,'.schedule(',tt,', ',e_int(Delay),', ',e_int(Interval),');')
      block.declvl()
    println('}')
  println('}')
end

func doStop(_data)
  println(tt,'.cancel();')
  println(tt,' = new ',MyTimerTask,'();')
  println(tg,' = false;')
end