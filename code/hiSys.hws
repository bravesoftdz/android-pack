func create(entry)
	include("Constants")

	gvar(code_files, code_file)
	gvar(blk, blk_import, blk_class, blk_fields, blk_methods, blk_on_create)
	
	code_files = new array()
	
	blk = block.reg("result")
end

func destroy(entry)
	for(i = 0; i < code_files.size(); i++)
		cf = code_files[i]
		blk.println('===',cf[CODE_FILE_NAME],'===')
	end
end

func add_code_file(name)
	cf = new array().fill(16, '')
	
	cf[CODE_FILE_NAME]            = name
	trace(cf[CODE_FILE_NAME])
	cf[CODE_FILE_DYNAMIC_METHODS] = new array()
	trace(cf[CODE_FILE_NAME])
	cf[CODE_FILE_BODY]            = block.reggen()
	cf[CODE_FILE_IMPORT]          = block.reggen()
	cf[CODE_FILE_FIELDS]          = block.reggen()
	cf[CODE_FILE_METHODS]         = block.reggen()
	cf[CODE_FILE_ON_CREATE]       = block.reggen()
	
	trace(cf[CODE_FILE_NAME])
	
	for(i = 0; i < cf.size(); i++)
		trace('' + i + ': ' + cf[i])
	end

	code_files.add(cf)
end

func set_code_file(name)
	old_code_file = code_file
	
	code_file_idx = -1
	for(i = 0; i < code_files.size(); i++)
		if(code_files[i][CODE_FILE_NAME] == name)
			code_file_idx = i
		end
	end
	
	if(code_file_idx == -1)
		add_code_file(name)
	end
	
	code_file = code_files[i]
	
	blk_import    = code_file[CODE_FILE_IMPORT]
	blk_class     = code_file[CODE_FILE_BODY]
	blk_fields    = code_file[CODE_FILE_FIELDS]
	blk_methods   = code_file[CODE_FILE_METHODS]
	blk_on_create = code_file[CODE_FILE_ON_CREATE]
	
	return(old_code_file)
end

func add_method(name, header)
	class_methods = code_file[CODE_FILE_DYNAMIC_METHODS]

	method_idx = -1
	for(i = 0; i < class_methods.size(); i++)
		if(class_methods[i][DYNAMIC_METHOD_NAME] == val)
			method_idx = i
		end
	end
	
	if(method_idx == -1)
		mthd_block = block.reggen()
		mthd_block.print(header).println(' {').inc()
		
		mthd = new array().fill(16, '')
		mthd[DYNAMIC_METHOD_NAME]  = name
		mthd[DYNAMIC_METHOD_BLOCK] = method_block
		
		class_methods.add(mthd)
		
		return(mthd_block)
	else
		return(class_methods[method_idx][DYNAMIC_METHOD_BLOCK])
	end
end