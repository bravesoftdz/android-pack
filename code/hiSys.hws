func create(entry)
	include("Constants")

	gvar(code_files, code_file)
	gvar(blk, blk_import, blk_class, blk_fields, blk_methods, blk_on_create)
	
	code_files = new array()
	
	blk = block.reg("result")
end

func destroy(entry)
	for(i = 0; i < code_files.size(); i++)
		trace(i)
		cf = code_files.get(i)
		blk.println('===',cf.get(CODE_FILE_NAME),'===')
	end
end

func add_code_file(name)
	cf = new array().fill(16, '')
	
	trace(name)
	cf.set(CODE_FILE_NAME, name)
	trace(cf.get(CODE_FILE_NAME))
	cf.set(CODE_FILE_DYNAMIC_METHODS, new array())
	cf.set(CODE_FILE_BODY, block.reggen())
	cf.set(CODE_FILE_IMPORT, block.reggen())
	cf.set(CODE_FILE_FIELDS, block.reggen())
	cf.set(CODE_FILE_METHODS, block.reggen())
	cf.set(CODE_FILE_ON_CREATE, block.reggen())
	
	code_files.add(cf)
end

func set_code_file(name)
	old_code_file = code_file
	
	code_file_idx = -1
	for(i = 0; i < code_files.size(); i++)
		if(code_files.get(i).get(CODE_FILE_NAME) == name)
			code_file_idx = i
		end
	end
	
	if(code_file_idx == -1)
		add_code_file(name)
	end
	
	code_file = code_files.get(i)
	
	blk_import = code_file.get(CODE_FILE_IMPORT)
	blk_class = code_file.get(CODE_FILE_BODY)
	blk_fields = code_file.get(CODE_FILE_FIELDS)
	blk_methods = code_file.get(CODE_FILE_METHODS)
	blk_on_create = code_file.get(CODE_FILE_ON_CREATE)
	
	return(old_code_file)
end

func add_method(name, header)
	method_idx = -1
	for(i = 0; i < class_methods.size(); i++)
		if(class_methods.get(i).get(0) == val)
			method_idx = i
		end
	end
	
	if(method_idx == -1)
		method_block = block.reggen()
		method_block.print(header).println(' {').inc()
		
		method_entry = new array()
		method_entry.add(name)
		method_entry.add(method_block)
		class_methods.add(method_entry)
		return(method_block)
	else
		return(class_methods.get(method_idx).get(1))
	end
end