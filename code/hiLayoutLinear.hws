include("general")

func PrintAttributes()

  // === Size ===//
  switch (HeightMode)
    case 0:
      println('android:layout_height="wrap_content"')
    case 1:
      println('android:layout_height="match_parent"')
    case 2:
      println('android:layout_height=', FixedHeight)  
  end
  
  switch (WidthMode)
    case 0:
      println('android:layout_width="wrap_content"')
    case 1:
      println('android:layout_width="match_parent"')
    case 2:
      println('android:layout_width=', FixedWidth)  
  end 
  // ============//
  
  if (Weight <> 0) 
    println('android:layout_weight=', str(Weight)) 
  end
  
  // === Padding ===//
  if (pLeft <> '') 
    println('android:paddingLeft=', pLeft) 
  end
  if (pTop <> '') 
    println('android:paddingTop=', pTop) 
  end  
  if (pRight <> '') 
    println('android:paddingRight=', pRight) 
  end
  if (pBottom <> '') 
    println('android:paddingBottom=', pBottom) 
  end 
  // ============//  

  if (isndef(BaselineAligned)) 
    println('android:baselineAligned="',lower(BaselineAligned),'"') 
  end
  
  // ==== Gravity ==== //
  fvar(grv, grh, grav)
  
  if ((gVertical = 2) and (gHorizontal = 2))
    grv = 'center'
  else
    switch (gVertical)
      case 0:
        grv = ''
      case 1:
        grv = 'top'
      case 2:
        grv = 'center_vertical'
      case 3:
        grv = 'bottom'  
    end 
    switch (gHorizontal)
      case 0:
        grh = ''
      case 1:
        grh = 'left'
      case 2:
        grh = 'center_horizontal'
      case 3:
        grh = 'right'  
    end 
  end
  
  if (grv <> '')
    grav &= grv  
  end
  
  if (grh <> '')
    grav &= grh  
  end 

  if (str(grav) <> "")  
    println('android:gravity="',_arr.join(grav, '|'),'"')
  end
  // ========= //
  
  // === Background ===// 
    PrintBackgroundAttribute()
  // =============//
    
end

func Init()
  var (start_block, end_block)
  var(arCompBlocks, arManagers, arTops, arLefts, arOrders) // Вспомогательные массивы для поддержки порядка размещения компонентов
  fvar(old)
  
  start_block = block.reggen()
  end_block = block.reggen()
  
  if (LayoutManager <> 0)
    sys.event(LayoutManager, 'add_manager_to_layout', sys.curelement(), Order)
  else
    sys.event(PARENT_ID, 'add_manager_to_layout', sys.curelement(), Order)
  end
  
   
  old = block.select(start_block)
       println('<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"')
       println('android:orientation="',lower(Orientation),'"')
       PrintAttributes()
       println('>')
        
       block.select(end_block)
       println('</LinearLayout>')   
  
  block.select(old)
  
end


// Дочерние компоненты вызывают этот метод 
// для добавления своего описания в текущий Layout
func add_to_layout(blk, t, l)
  fvar(i, k, old, tmp)
  i = GetIndexByTwoArrays(arTops, arLefts, t, l)
  arCompBlocks = InsertInArray(arCompBlocks, blk, i)
  arTops = InsertInArray(arTops, t, i)
  arLefts = InsertInArray(arLefts, l, i)  
end

// Дочерний Layout вызывает этот метод
// для добавления своего ID
func add_manager_to_layout(mgr_id, o)
  fvar(i)
  //if ((LayoutManager <> 0) and (LayoutManager <> mgr_id))
  //  sys.event(LayoutManager, 'add_manager_to_layout', mgr_id, o)
  //else    
  i = GetIndexInArray(arOrders, o)
  arManagers = InsertInArray(arManagers, mgr_id, i)
  arOrders = InsertInArray(arOrders, o, i)
  //end   
end

// Родительский Layout или форма вызывают этот метод для получения
// массива блоков данного Layout
func return_submanagers_array()
  fvar(i, tmp)
      
  tmp = start_block & arCompBlocks
  for (i = 0; i<_arr.count(arManagers); i++)
    if (arManagers[i] <> 'undefined')
      tmp &= sys.event(arManagers[i], 'return_submanagers_array')
    end
  end 
  tmp &= end_block         
  return(tmp)
end

// Возможно компонентам нужно
// будет знать тип менеджера
// для внесения специфических параметров
func get_layout_type()
  return ('linear')
end
